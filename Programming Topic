1. Big O natation
알고리즘의 복잡도를 수식화 시킨 것이다. O(n의 수식) 형태로 구성하며, 복잡도에는 시간과 공간 복잡도가 존재한다. 예를 들어 버블정렬은 O(n2), 
합병정렬은 O(n log n)이다.

2. Exhausive Enumeration
원하는 Value값을 찾기 위해 전수조사(Brute Force)를 뜻한다. 코드를 짜기 쉬운 반면, 시간복잡도와 공간복잡도가 증가한다. 
버블정렬은 전수조사와 같으며 binery search는 합리적인 enumeration이다.

3. Guess and check
값을 찾기 위해 value를 추측하고 답과 비교한 뒤 찾는 방법이다. 1~30까지 중 숫자를 추측하고 정답과 대소를 비교 한 뒤 추측을 이어가며 답을 찾는다. 
Binery search는 guess의 과정에서 가장 효율적인 절반을 택하여 추측하는 방식이다.

4. Successive approximation
Binery search로 절반을 나눠 value를 추측하고 value가 속한 부분의 집단을 다시 반으로 나눠서 탐색하여 답을 찾아가는 방식이다. 
이러한 방식은 시간복잡도가 O(n log n)이기 때문에 가장 빠르고 효율적인 방법이다.

5. Divde and conquer algorithms
Binery search와 유사하게 문제를 해결하는 방식이다. 문제를 2개로 나눠서 답과 비교하여 해당되는 범위를 다시 반으로 나눠 (conquer)하는 방식이다.
이러한 방법은 시간복잡도가 O(n log n)이다. 합병정렬은 이러한 알고리즘을 활용한 방식으로 정렬하는 방법이다.

6. Binery search
이진탐색은 순서대로 정렬된 리스트에서 특정 값을 찾는 알고리즘이다. 중간값(임의의 값)을 입력하여 대소를 비교하고 해당되는 리스트를 반으로 자르고
다시 탐색하여 답을 추적한다. 복잡도는 O(n log n)이다.

7. Merge sort
합병정렬은 정렬을 위한 방식 중 하나로 분할정복 알고리즘을 이용한 정렬방식이다. 각각을 중간값을 최소단위가 될 때까지 나누고 대소비교를 한 뒤, 
다시 합병하는 순서로 진행된다. 합병정렬의 복잡도는 O(n log n)이지만, 이진탐색을 위해 정렬과정에서의 합병정렬이 무조건 답일 수는 없다. (정렬->탐색)의 과정이 2개이기 때문에.

8. Greedy algorithms
최선의 값을 찾는 과정에서 현재의 조건에서 최댓값만을 찾는 알고리즘이다. Greedy algorithms는 선택을 이어서 하는 과정에서 가장 좋은 선택을 
못할 수 있는 가능성이 존재한다. 25kg 베낭에 16, 10, 11의 물품이 있다면 16을 선택하는 것보다, 10+11을 선택하는 것이 더 좋은 답이다.

9. Knapsack problems
한정된 용량을 가진 베낭에 최적의 물품들을 넣는 것을 구하는 알고리즘 문제이다. 베낭 문제는 베낭의 무게를 쪼갤 수 있는 경우와 쪼갤 수 없는 경우로
나눠 해결 방식을 다르게 가져갈 수 있다. 전자의 경우 탐욕알고리즘으로 최적값을 구할 수 있고, 후자의 경우 다이나믹 프로그래밍을 통해
최적값을 구할 수 있다.

10. depth first search and backtracking
방문하지 않은 지점으로 향하는 선이 있다면 그 선을 무조건 가서 갈때까지 가는 탐색방법이다. 갈 곳이 없다면, 뒤로 돌아가서 다시 탐색이 이루어진다.
이때 뒤로 돌아가는 것을 backtracking이라 칭한다. DFS와 달리 BFS는 갈 수 있는 인접한 모든 위치를 방문하고 방문하지않은 이웃을 방문하는 서치방식이다.

11. Dynamic programming
동적계획법은 풀어내는 과정에서 반복하는 과정이 존재할 때 이를 저장(기억)해두었다가 반복과정에서 사용하는 것을 뜻한다. 
예를 들어 피보나치 수열을 구하는 과정에서 recursive 함수로 계속된 호출을 한다면 마무리 루프에서는 여태까지 온 루프를 모두 반하여야 한다. 
동적계획법은 이전의 value를 기억해두고 이를 바로 활용하여 복잡도를 감소시키는 방식이다.

12. Decision trees
의사결정을 지원하는 도구다. 결정을 위해서 네모로 표시하고, 기회는 원, 종단은 삼각형으로 표시하며 의사결정을 표시한다.

13. order of growth
1) exponential 2의 n제곱으로 기하급수적으로 복잡도가 커진다.
2) polynomial n의 제곱꼴 형태로 복잡도가 커지지만, 지수보다는 덜하다.
3) linear: 1차방정식 형태
4) log: n log n의 형태, 가장 복잡도가 적은 방식이다.

14. Amortized analysis
알고리즘 복잡도를 검증하는 한 방법이다. 복잡도는 최악의 상황, 평균의 상황을 주로 측정하는데 매 연산마다 최악의 상황을 계산하기에는 복잡하므로, 
최악을 분할상환하여 예측한다.

15. Values
프로그래밍에서 value는 지정된 메모리를 할당받은 실제 값을 의미한다. 
이러한 실제 값을 메모리에 저장하고 인스턴스(저장위치), 변수 등을 통하여불러올 수 있다.

16. Type
Value의 종류를 의미한다. 자바에서는 기본자료형 int, float, char 등이 있고 이외에 나머지 자료형을 참조자료형이라 한다.

17. Variable
Value를 위치나 지정에 의해 불러와진 변수, 변수는 타입선언과 초기화를 할 수 있다.

18. Mutability and aliasing
Call by Value and Call by Reference/ Call by Value는 기본자료형, 즉 메모리를 계속해서 할당받는 변수를 의미한다. 
이는 같은 value를 지정받은두 변수 중 한 변수를 변경하여도 다른 변수는 영향을 받지 않는다. 
하지만 Call by Reference는 변수가 위치를 기억하기 때문에 value의 값이 변화한다면 다른 변수의 value도 변화하게 된다. 
예를 들어 파이썬에서 리스트1과 리스트2를 리스트1=리스트2를 한다면, 주소복사지만, .copy()나 [:]를 실행한다면 같은 리스트를 메모리에 하나 더 할당한다.

19. Control flow and iteration
파이썬에서 제어흐름은 위에서부터 아래로의 절차를 지향한다. 
다만 절차 진행 중에 if절과 같은 조건절을 만나면 조건을 해당할 때 메소드를 실행, 루프의 경우에도 조건 만족시에 반복한다. 
반복문은 iterative와 recursive방식이 존재한다. Iterative는 함수를 불러오는 것이 아닌 method에 의해서 루프가 반복되는 것을 뜻한다.

20. Function and methods
함수는 클래스(객체) 내부에 존재하는 메소드를 뜻한다. 클래스 내부에서 특정 기능을 가진 함수이며, 내부에 접근해 실행할 수 있다. 
함수는 하나의 모듈로 기능을 지니고 있고, 명령 호출에 의해 실행된다.

21. Input and Output
사용자 혹은 데이터의 초기 입력값을 input, 함수를 통해서 산출된 결과를 output이라 한다.

22. Recursion and call stacks
Recursion은 메소드에 의한 반복을 의미한다. 메소드 안에 메소드가 추가되어 계속된 반복을 하게 되는 루프상황이다. 
그래서 함수안에서 코드정보를 모르거나, 제한하지 않는다면 무한 반복 상황에 빠지기 때문에, 메소드에 정보를 심어 놓는 곳을 콜 스택이라 칭한다.

23. Exceptions
프로그래밍과 코딩을 한다면 수많은 에러상황에 직면할 수 있다.
에러상황이 발생했을 때 프로그래머가 원하는 방식으로 대처하길 원한다면,exception을 둘 수 있다.
예를 들어 Try: 함수를 실행하고 함수가 에러가 난다면, exception 문에서 프로그래머가 원하는 방식으로 코드를 진행시킬 수 있다.

24. Polymorphism
객체 지향 프로그래밍에서 클래스를 상속받아 오버라이딩 및 부모클래스에서 변화를 준 것을 칭한다. 이는 객체(부품)의 특성은 같지만, 
기능에서 약간 변화가 있을 때 유용하게 쓸 수 있다. 자동차의 타이어 부품을 비교하자면, 
타이어라는 클래스에 상속받은 한국타이어, 금호타이어, 넥센타이어가 다형성이라 칭할 수 있다.

25. Moduls
하나의 객체를 모듈이라 칭한다. 클래스나 메소드가 하나의 부품(기능)을 발휘할 때 모듈이 된다. 
파이썬에서는 라이브러리 혹은 객체클래스를 소환하여 사용할 수 있다. 객체지향 프로그래밍의 핵심이기도 하다. [캡슐화, 다형성, 상속]

26. Class and Object
객체는 메모리를 할당받지 않은 상태의 클래스를 의미한다.
클래스는 하나의 모듈로 메모리를 사용하고 있지 않지만, 호출되었을 때 그 안의 메소드, 함수, 변수를 사용할 수 있다.
이러한 객체를 인스턴스를 통해 지정하고 소환하면 실행될 수 있다.

27. Pylab
파이썬의 기본적인 내재 기능이 아닌 외부 라이브러리를 통해 받을 수 있는 라이브러리다. 
라이브러리는 타인의 제작한 클래스를 import해와서 메소드를 사용할 수 있는 것이다.

28. Random walks

29. Monte Carlo methods

30. When you should believe the answer

31. Building computational models

32. Uniform, normal, and exponential distributions

33. Linear regressions

33. Evaluating fits(Overfitting)

34. Statistical sins(Texas sharpshooter, Data enhancement, Non-representative sample, cum hoc ergo propter hoc)

35. Plotting

36. Debugging and testing

37. Data abstraction and inheritance

38. Program organization(Specifications)
